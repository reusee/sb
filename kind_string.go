// Code generated by "stringer -type=Kind"; DO NOT EDIT.

package sb

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[KindInvalid-0]
	_ = x[KindMin-1]
	_ = x[KindArrayEnd-10]
	_ = x[KindObjectEnd-20]
	_ = x[KindMapEnd-25]
	_ = x[KindTupleEnd-27]
	_ = x[KindNil-30]
	_ = x[KindBool-40]
	_ = x[KindString-50]
	_ = x[KindBytes-55]
	_ = x[KindInt-60]
	_ = x[KindInt8-70]
	_ = x[KindInt16-80]
	_ = x[KindInt32-90]
	_ = x[KindInt64-100]
	_ = x[KindUint-110]
	_ = x[KindUint8-120]
	_ = x[KindUint16-130]
	_ = x[KindUint32-140]
	_ = x[KindUint64-150]
	_ = x[KindFloat32-160]
	_ = x[KindFloat64-170]
	_ = x[KindNaN-175]
	_ = x[KindArray-180]
	_ = x[KindObject-190]
	_ = x[KindMap-200]
	_ = x[KindTuple-210]
	_ = x[KindRef-251]
	_ = x[KindMax-255]
}

const _Kind_name = "KindInvalidKindMinKindArrayEndKindObjectEndKindMapEndKindTupleEndKindNilKindBoolKindStringKindBytesKindIntKindInt8KindInt16KindInt32KindInt64KindUintKindUint8KindUint16KindUint32KindUint64KindFloat32KindFloat64KindNaNKindArrayKindObjectKindMapKindTupleKindPostTagKindRefKindMax"

var _Kind_map = map[Kind]string{
	0:   _Kind_name[0:11],
	1:   _Kind_name[11:18],
	10:  _Kind_name[18:30],
	20:  _Kind_name[30:43],
	25:  _Kind_name[43:53],
	27:  _Kind_name[53:65],
	30:  _Kind_name[65:72],
	40:  _Kind_name[72:80],
	50:  _Kind_name[80:90],
	55:  _Kind_name[90:99],
	60:  _Kind_name[99:106],
	70:  _Kind_name[106:114],
	80:  _Kind_name[114:123],
	90:  _Kind_name[123:132],
	100: _Kind_name[132:141],
	110: _Kind_name[141:149],
	120: _Kind_name[149:158],
	130: _Kind_name[158:168],
	140: _Kind_name[168:178],
	150: _Kind_name[178:188],
	160: _Kind_name[188:199],
	170: _Kind_name[199:210],
	175: _Kind_name[210:217],
	180: _Kind_name[217:226],
	190: _Kind_name[226:236],
	200: _Kind_name[236:243],
	210: _Kind_name[243:252],
	250: _Kind_name[252:263],
	251: _Kind_name[263:270],
	255: _Kind_name[270:277],
}

func (i Kind) String() string {
	if str, ok := _Kind_map[i]; ok {
		return str
	}
	return "Kind(" + strconv.FormatInt(int64(i), 10) + ")"
}
